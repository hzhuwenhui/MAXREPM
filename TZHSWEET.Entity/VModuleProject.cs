//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TZHSWEET.Entity
{
    [DataContract(IsReference = true)]
    public partial class VModuleProject: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> category_id
        {
            get { return _category_id; }
            set
            {
                if (_category_id != value)
                {
                    _category_id = value;
                    OnPropertyChanged("category_id");
                }
            }
        }
        private Nullable<int> _category_id;
    
        [DataMember]
        public string project_code
        {
            get { return _project_code; }
            set
            {
                if (_project_code != value)
                {
                    _project_code = value;
                    OnPropertyChanged("project_code");
                }
            }
        }
        private string _project_code;
    
        [DataMember]
        public string project_name
        {
            get { return _project_name; }
            set
            {
                if (_project_name != value)
                {
                    _project_name = value;
                    OnPropertyChanged("project_name");
                }
            }
        }
        private string _project_name;
    
        [DataMember]
        public Nullable<int> project_level
        {
            get { return _project_level; }
            set
            {
                if (_project_level != value)
                {
                    _project_level = value;
                    OnPropertyChanged("project_level");
                }
            }
        }
        private Nullable<int> _project_level;
    
        [DataMember]
        public string project_address
        {
            get { return _project_address; }
            set
            {
                if (_project_address != value)
                {
                    _project_address = value;
                    OnPropertyChanged("project_address");
                }
            }
        }
        private string _project_address;
    
        [DataMember]
        public Nullable<int> leader_id
        {
            get { return _leader_id; }
            set
            {
                if (_leader_id != value)
                {
                    _leader_id = value;
                    OnPropertyChanged("leader_id");
                }
            }
        }
        private Nullable<int> _leader_id;
    
        [DataMember]
        public string customer_name
        {
            get { return _customer_name; }
            set
            {
                if (_customer_name != value)
                {
                    _customer_name = value;
                    OnPropertyChanged("customer_name");
                }
            }
        }
        private string _customer_name;
    
        [DataMember]
        public Nullable<int> project_status
        {
            get { return _project_status; }
            set
            {
                if (_project_status != value)
                {
                    _project_status = value;
                    OnPropertyChanged("project_status");
                }
            }
        }
        private Nullable<int> _project_status;
    
        [DataMember]
        public Nullable<double> totalbudget
        {
            get { return _totalbudget; }
            set
            {
                if (_totalbudget != value)
                {
                    _totalbudget = value;
                    OnPropertyChanged("totalbudget");
                }
            }
        }
        private Nullable<double> _totalbudget;
    
        [DataMember]
        public Nullable<System.DateTime> plancycle_startdate
        {
            get { return _plancycle_startdate; }
            set
            {
                if (_plancycle_startdate != value)
                {
                    _plancycle_startdate = value;
                    OnPropertyChanged("plancycle_startdate");
                }
            }
        }
        private Nullable<System.DateTime> _plancycle_startdate;
    
        [DataMember]
        public Nullable<System.DateTime> plancycle_enddate
        {
            get { return _plancycle_enddate; }
            set
            {
                if (_plancycle_enddate != value)
                {
                    _plancycle_enddate = value;
                    OnPropertyChanged("plancycle_enddate");
                }
            }
        }
        private Nullable<System.DateTime> _plancycle_enddate;
    
        [DataMember]
        public Nullable<System.DateTime> deliverydate
        {
            get { return _deliverydate; }
            set
            {
                if (_deliverydate != value)
                {
                    _deliverydate = value;
                    OnPropertyChanged("deliverydate");
                }
            }
        }
        private Nullable<System.DateTime> _deliverydate;
    
        [DataMember]
        public Nullable<bool> IsTimeOut
        {
            get { return _isTimeOut; }
            set
            {
                if (_isTimeOut != value)
                {
                    _isTimeOut = value;
                    OnPropertyChanged("IsTimeOut");
                }
            }
        }
        private Nullable<bool> _isTimeOut;
    
        [DataMember]
        public string leader_name
        {
            get { return _leader_name; }
            set
            {
                if (_leader_name != value)
                {
                    _leader_name = value;
                    OnPropertyChanged("leader_name");
                }
            }
        }
        private string _leader_name;
    
        [DataMember]
        public string category_name
        {
            get { return _category_name; }
            set
            {
                if (_category_name != value)
                {
                    _category_name = value;
                    OnPropertyChanged("category_name");
                }
            }
        }
        private string _category_name;
    
        [DataMember]
        public string project_profile
        {
            get { return _project_profile; }
            set
            {
                if (_project_profile != value)
                {
                    _project_profile = value;
                    OnPropertyChanged("project_profile");
                }
            }
        }
        private string _project_profile;
    
        [DataMember]
        public Nullable<bool> IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private Nullable<bool> _isDeleted;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}

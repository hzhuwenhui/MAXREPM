//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TZHSWEET.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PM_Approve))]
    [KnownType(typeof(PM_Contract))]
    [KnownType(typeof(PM_Department))]
    [KnownType(typeof(PM_Directorys))]
    [KnownType(typeof(PM_Member))]
    [KnownType(typeof(PM_Task))]
    [KnownType(typeof(PM_Attachment))]
    public partial class PM_Project: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<int> category_id
        {
            get { return _category_id; }
            set
            {
                if (_category_id != value)
                {
                    _category_id = value;
                    OnPropertyChanged("category_id");
                }
            }
        }
        private Nullable<int> _category_id;
    
        [DataMember]
        public string project_code
        {
            get { return _project_code; }
            set
            {
                if (_project_code != value)
                {
                    _project_code = value;
                    OnPropertyChanged("project_code");
                }
            }
        }
        private string _project_code;
    
        [DataMember]
        public string project_name
        {
            get { return _project_name; }
            set
            {
                if (_project_name != value)
                {
                    _project_name = value;
                    OnPropertyChanged("project_name");
                }
            }
        }
        private string _project_name;
    
        [DataMember]
        public Nullable<int> project_level
        {
            get { return _project_level; }
            set
            {
                if (_project_level != value)
                {
                    _project_level = value;
                    OnPropertyChanged("project_level");
                }
            }
        }
        private Nullable<int> _project_level;
    
        [DataMember]
        public string project_address
        {
            get { return _project_address; }
            set
            {
                if (_project_address != value)
                {
                    _project_address = value;
                    OnPropertyChanged("project_address");
                }
            }
        }
        private string _project_address;
    
        [DataMember]
        public string project_profile
        {
            get { return _project_profile; }
            set
            {
                if (_project_profile != value)
                {
                    _project_profile = value;
                    OnPropertyChanged("project_profile");
                }
            }
        }
        private string _project_profile;
    
        [DataMember]
        public Nullable<int> leader_id
        {
            get { return _leader_id; }
            set
            {
                if (_leader_id != value)
                {
                    _leader_id = value;
                    OnPropertyChanged("leader_id");
                }
            }
        }
        private Nullable<int> _leader_id;
    
        [DataMember]
        public string customer_name
        {
            get { return _customer_name; }
            set
            {
                if (_customer_name != value)
                {
                    _customer_name = value;
                    OnPropertyChanged("customer_name");
                }
            }
        }
        private string _customer_name;
    
        [DataMember]
        public Nullable<int> project_status
        {
            get { return _project_status; }
            set
            {
                if (_project_status != value)
                {
                    _project_status = value;
                    OnPropertyChanged("project_status");
                }
            }
        }
        private Nullable<int> _project_status;
    
        [DataMember]
        public Nullable<double> totalbudget
        {
            get { return _totalbudget; }
            set
            {
                if (_totalbudget != value)
                {
                    _totalbudget = value;
                    OnPropertyChanged("totalbudget");
                }
            }
        }
        private Nullable<double> _totalbudget;
    
        [DataMember]
        public Nullable<System.DateTime> plancycle_startdate
        {
            get { return _plancycle_startdate; }
            set
            {
                if (_plancycle_startdate != value)
                {
                    _plancycle_startdate = value;
                    OnPropertyChanged("plancycle_startdate");
                }
            }
        }
        private Nullable<System.DateTime> _plancycle_startdate;
    
        [DataMember]
        public Nullable<System.DateTime> plancycle_enddate
        {
            get { return _plancycle_enddate; }
            set
            {
                if (_plancycle_enddate != value)
                {
                    _plancycle_enddate = value;
                    OnPropertyChanged("plancycle_enddate");
                }
            }
        }
        private Nullable<System.DateTime> _plancycle_enddate;
    
        [DataMember]
        public Nullable<System.DateTime> deliverydate
        {
            get { return _deliverydate; }
            set
            {
                if (_deliverydate != value)
                {
                    _deliverydate = value;
                    OnPropertyChanged("deliverydate");
                }
            }
        }
        private Nullable<System.DateTime> _deliverydate;
    
        [DataMember]
        public Nullable<bool> IsTimeOut
        {
            get { return _isTimeOut; }
            set
            {
                if (_isTimeOut != value)
                {
                    _isTimeOut = value;
                    OnPropertyChanged("IsTimeOut");
                }
            }
        }
        private Nullable<bool> _isTimeOut;
    
        [DataMember]
        public Nullable<int> change_lastid
        {
            get { return _change_lastid; }
            set
            {
                if (_change_lastid != value)
                {
                    _change_lastid = value;
                    OnPropertyChanged("change_lastid");
                }
            }
        }
        private Nullable<int> _change_lastid;
    
        [DataMember]
        public Nullable<System.DateTime> change_lasttime
        {
            get { return _change_lasttime; }
            set
            {
                if (_change_lasttime != value)
                {
                    _change_lasttime = value;
                    OnPropertyChanged("change_lasttime");
                }
            }
        }
        private Nullable<System.DateTime> _change_lasttime;
    
        [DataMember]
        public Nullable<int> CreateUserID
        {
            get { return _createUserID; }
            set
            {
                if (_createUserID != value)
                {
                    _createUserID = value;
                    OnPropertyChanged("CreateUserID");
                }
            }
        }
        private Nullable<int> _createUserID;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public Nullable<int> ModifyUserID
        {
            get { return _modifyUserID; }
            set
            {
                if (_modifyUserID != value)
                {
                    _modifyUserID = value;
                    OnPropertyChanged("ModifyUserID");
                }
            }
        }
        private Nullable<int> _modifyUserID;
    
        [DataMember]
        public Nullable<System.DateTime> ModifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("ModifyDate");
                }
            }
        }
        private Nullable<System.DateTime> _modifyDate;
    
        [DataMember]
        public string RecordStatus
        {
            get { return _recordStatus; }
            set
            {
                if (_recordStatus != value)
                {
                    _recordStatus = value;
                    OnPropertyChanged("RecordStatus");
                }
            }
        }
        private string _recordStatus;
    
        [DataMember]
        public Nullable<bool> IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private Nullable<bool> _isDeleted;
    
        [DataMember]
        public Nullable<int> DeletedUserID
        {
            get { return _deletedUserID; }
            set
            {
                if (_deletedUserID != value)
                {
                    _deletedUserID = value;
                    OnPropertyChanged("DeletedUserID");
                }
            }
        }
        private Nullable<int> _deletedUserID;
    
        [DataMember]
        public Nullable<System.DateTime> DeletedDate
        {
            get { return _deletedDate; }
            set
            {
                if (_deletedDate != value)
                {
                    _deletedDate = value;
                    OnPropertyChanged("DeletedDate");
                }
            }
        }
        private Nullable<System.DateTime> _deletedDate;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<PM_Approve> PM_Approve
        {
            get
            {
                if (_pM_Approve == null)
                {
                    _pM_Approve = new TrackableCollection<PM_Approve>();
                    _pM_Approve.CollectionChanged += FixupPM_Approve;
                }
                return _pM_Approve;
            }
            set
            {
                if (!ReferenceEquals(_pM_Approve, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Approve != null)
                    {
                        _pM_Approve.CollectionChanged -= FixupPM_Approve;
                    }
                    _pM_Approve = value;
                    if (_pM_Approve != null)
                    {
                        _pM_Approve.CollectionChanged += FixupPM_Approve;
                    }
                    OnNavigationPropertyChanged("PM_Approve");
                }
            }
        }
        private TrackableCollection<PM_Approve> _pM_Approve;
    
        [DataMember]
        public TrackableCollection<PM_Contract> PM_Contract
        {
            get
            {
                if (_pM_Contract == null)
                {
                    _pM_Contract = new TrackableCollection<PM_Contract>();
                    _pM_Contract.CollectionChanged += FixupPM_Contract;
                }
                return _pM_Contract;
            }
            set
            {
                if (!ReferenceEquals(_pM_Contract, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Contract != null)
                    {
                        _pM_Contract.CollectionChanged -= FixupPM_Contract;
                    }
                    _pM_Contract = value;
                    if (_pM_Contract != null)
                    {
                        _pM_Contract.CollectionChanged += FixupPM_Contract;
                    }
                    OnNavigationPropertyChanged("PM_Contract");
                }
            }
        }
        private TrackableCollection<PM_Contract> _pM_Contract;
    
        [DataMember]
        public TrackableCollection<PM_Department> PM_Department
        {
            get
            {
                if (_pM_Department == null)
                {
                    _pM_Department = new TrackableCollection<PM_Department>();
                    _pM_Department.CollectionChanged += FixupPM_Department;
                }
                return _pM_Department;
            }
            set
            {
                if (!ReferenceEquals(_pM_Department, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Department != null)
                    {
                        _pM_Department.CollectionChanged -= FixupPM_Department;
                    }
                    _pM_Department = value;
                    if (_pM_Department != null)
                    {
                        _pM_Department.CollectionChanged += FixupPM_Department;
                    }
                    OnNavigationPropertyChanged("PM_Department");
                }
            }
        }
        private TrackableCollection<PM_Department> _pM_Department;
    
        [DataMember]
        public TrackableCollection<PM_Directorys> PM_Directorys
        {
            get
            {
                if (_pM_Directorys == null)
                {
                    _pM_Directorys = new TrackableCollection<PM_Directorys>();
                    _pM_Directorys.CollectionChanged += FixupPM_Directorys;
                }
                return _pM_Directorys;
            }
            set
            {
                if (!ReferenceEquals(_pM_Directorys, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Directorys != null)
                    {
                        _pM_Directorys.CollectionChanged -= FixupPM_Directorys;
                    }
                    _pM_Directorys = value;
                    if (_pM_Directorys != null)
                    {
                        _pM_Directorys.CollectionChanged += FixupPM_Directorys;
                    }
                    OnNavigationPropertyChanged("PM_Directorys");
                }
            }
        }
        private TrackableCollection<PM_Directorys> _pM_Directorys;
    
        [DataMember]
        public TrackableCollection<PM_Member> PM_Member
        {
            get
            {
                if (_pM_Member == null)
                {
                    _pM_Member = new TrackableCollection<PM_Member>();
                    _pM_Member.CollectionChanged += FixupPM_Member;
                }
                return _pM_Member;
            }
            set
            {
                if (!ReferenceEquals(_pM_Member, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Member != null)
                    {
                        _pM_Member.CollectionChanged -= FixupPM_Member;
                    }
                    _pM_Member = value;
                    if (_pM_Member != null)
                    {
                        _pM_Member.CollectionChanged += FixupPM_Member;
                    }
                    OnNavigationPropertyChanged("PM_Member");
                }
            }
        }
        private TrackableCollection<PM_Member> _pM_Member;
    
        [DataMember]
        public TrackableCollection<PM_Task> PM_Task
        {
            get
            {
                if (_pM_Task == null)
                {
                    _pM_Task = new TrackableCollection<PM_Task>();
                    _pM_Task.CollectionChanged += FixupPM_Task;
                }
                return _pM_Task;
            }
            set
            {
                if (!ReferenceEquals(_pM_Task, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_pM_Task != null)
                    {
                        _pM_Task.CollectionChanged -= FixupPM_Task;
                    }
                    _pM_Task = value;
                    if (_pM_Task != null)
                    {
                        _pM_Task.CollectionChanged += FixupPM_Task;
                    }
                    OnNavigationPropertyChanged("PM_Task");
                }
            }
        }
        private TrackableCollection<PM_Task> _pM_Task;
    
        [DataMember]
        public PM_Attachment PM_Attachment
        {
            get { return _pM_Attachment; }
            set
            {
                if (!ReferenceEquals(_pM_Attachment, value))
                {
                    var previousValue = _pM_Attachment;
                    _pM_Attachment = value;
                    FixupPM_Attachment(previousValue);
                    OnNavigationPropertyChanged("PM_Attachment");
                }
            }
        }
        private PM_Attachment _pM_Attachment;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PM_Approve.Clear();
            PM_Contract.Clear();
            PM_Department.Clear();
            PM_Directorys.Clear();
            PM_Member.Clear();
            PM_Task.Clear();
            PM_Attachment = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupPM_Attachment(PM_Attachment previousValue)
        {
            // 这是执行级联删除的关联中的主体端。
            // 更新事件侦听器以引用新依赖。
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (PM_Attachment != null)
            {
                ChangeTracker.ObjectStateChanging += PM_Attachment.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.PM_Project, this))
            {
                previousValue.PM_Project = null;
            }
    
            if (PM_Attachment != null)
            {
                PM_Attachment.PM_Project = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PM_Attachment")
                    && (ChangeTracker.OriginalValues["PM_Attachment"] == PM_Attachment))
                {
                    ChangeTracker.OriginalValues.Remove("PM_Attachment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PM_Attachment", previousValue);
                    // 这是识别关联的主体端，因此在移除关系时必须删除依赖。
                    // 如果依赖的当前状态为“已添加”，则可以更改关系而不会导致删除依赖。
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (PM_Attachment != null && !PM_Attachment.ChangeTracker.ChangeTrackingEnabled)
                {
                    PM_Attachment.StartTracking();
                }
            }
        }
    
        private void FixupPM_Approve(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Approve item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Approve", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Approve item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Approve", item);
                    }
                }
            }
        }
    
        private void FixupPM_Contract(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Contract item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Contract", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Contract item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Contract", item);
                    }
                }
            }
        }
    
        private void FixupPM_Department(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Department item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Department", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Department item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Department", item);
                    }
                }
            }
        }
    
        private void FixupPM_Directorys(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Directorys item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Directorys", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Directorys item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Directorys", item);
                    }
                }
            }
        }
    
        private void FixupPM_Member(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Member item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Member", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Member item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Member", item);
                    }
                }
            }
        }
    
        private void FixupPM_Task(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PM_Task item in e.NewItems)
                {
                    item.PM_Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PM_Task", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PM_Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.PM_Project, this))
                    {
                        item.PM_Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PM_Task", item);
                    }
                }
            }
        }

        #endregion

    }
}
